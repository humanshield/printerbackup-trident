######################################################################
#####     fan-control macros     #####

[delayed_gcode delayed_fan_cooldown]
initial_duration: 0
gcode:    
  #{% if (printer.chamber_temp.temperature > 45 ) %}
  #  UPDATE_DELAYED_GCODE ID=delayed_fan_cooldown DURATION=300  # reset/re-run the delay (300=5min)
  #{% else %}    # shutdown fans
    SET_FAN_SPEED FAN=nevermore_fan SPEED=0.0 # turn off nevermore
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.0 # turn off exhaust fan
  #{% endif %}

[gcode_macro cooldown_off]
gcode:
  UPDATE_DELAYED_GCODE ID=delayed_fan_cooldown DURATION=0    # shut-down the loop
  SET_FAN_SPEED FAN=nevermore_fan SPEED=0.0 # turn off nevermore
  SET_FAN_SPEED FAN=exhaust_fan SPEED=0.0 # turn off exhaust fan

[gcode_macro stealth_mode]
gcode:
    SET_VELOCITY_LIMIT ACCEL=3000
    SET_VELOCITY_LIMIT VELOCITY=650

[gcode_macro speed_mode]
gcode:
    
    #{% set ACCEL_SETTINGS = printer.configfile.settings['printer accel']|float %}
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
    SET_VELOCITY_LIMIT VELOCITY=650

[gcode_macro FAN_NEVERMORE_OFF]
description: turn off Nevermore
gcode:
    SET_FAN_SPEED FAN=nevermore_fan SPEED=0

[gcode_macro FAN_NEVERMORE_SET]
description: Set Nevermore power 0-100
gcode:
    {% set SPEED = params.SPEED|default(100)|float %}
    SET_FAN_SPEED FAN=nevermore_fan SPEED={(SPEED / 100)}

[gcode_macro FAN_EXHAUST_OFF]
description: turn off the exhaust fan
gcode:
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0

[gcode_macro FAN_EXHAUST_SET]
description: Set exhaust fan power 0-100
gcode:
    {% set SPEED = params.SPEED|default(100)|float %}
    SET_FAN_SPEED FAN=exhaust_fan SPEED={(SPEED / 100)}


######################################################################
[gcode_macro PRINT_START]
description: pirnt heatup and start-configuration macro, used by slicer at start of print
gcode:
    # Set new default parameters
    {% set BED = params.BED|default(100)|int %}
    {% set EXTRUDER = params.EXTRUDER|default(250)|int %}
    {% set EXTRUDER_STANDBY = params.EXTRUDER_STANDBY|default(170)|int %}
    {% set TARGET_CHAMBER = params.CHAMBER|default(38)|int %}
    
    CLEAR_PAUSE                                 # Clear Any Paused State
    BED_MESH_CLEAR                              # Clears old saved bed mesh (if any)
	  M117                                        # Clear Display
    UPDATE_DELAYED_GCODE ID=delayed_fan_cooldown DURATION=0    # Turn off the cooldown-timer macro
    
    STATUS_HEATING
    SET_FAN_SPEED FAN=nevermore_fan SPEED=0.85  # Set the nevermore fan
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.15    # Set the exhaust fan
    # Start heating nozzle, heat bed
    M104 S{EXTRUDER_STANDBY}
    M190 S{BED}
    
    M220 S100
    G90                                                   # Use absolute coordinates
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Home the printer
    STATUS_HOMING
    #SET_GCODE_VARIABLE MACRO=G28 VARIABLE=homing VALUE=True
    G28
    #SET_GCODE_VARIABLE MACRO=G28 VARIABLE=homing VALUE=False
    # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
    {% if params.BED|int > 85 %}
      SET_DISPLAY_TEXT MSG="Bed: {BED}c"                  # Displays info
      G1 X125 Y125 Z15 F9000                              # Goes to center of the bed
      M106 S255                                           # Turns on the PT-fan
      SET_DISPLAY_TEXT MSG="Heatsoak: {TARGET_CHAMBER}c"  # Displays info
      STATUS_HEATING
      TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber" MINIMUM={TARGET_CHAMBER}   # Waits for chamber to reach desired temp
    {% endif %}
    STATUS_CLEANING
    clean_nozzle            # Run the nozzle brush-and-purge routine
    STATUS_HOMING
    #SET_GCODE_VARIABLE MACRO=G28 VARIABLE=homing VALUE=True
    G28 Z
    #SET_GCODE_VARIABLE MACRO=G28 VARIABLE=homing VALUE=False

    # start by making sure the nozzle is at the standby-temp
    {% if params.EXTRUDER| int > EXTRUDER_STANDBY %}
      STATUS_HEATING
      M109 S{EXTRUDER_STANDBY}
    {% endif %}

    # Gantry/bed leveling and meshing
    STATUS_LEVELING
    ATTACH_PROBE_LOCK
    Z_TILT_ADJUST           # Run the (adaptive) bed-meshing
    STATUS_MESHING
    #SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=True
    BED_MESH_CALIBRATE #ADAPTIVE=1
    #SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=False
    #STATUS_CLEANING
    #clean_nozzle            # Run the nozzle brush-and-purge routine
    STATUS_CALIBRATING_Z
    CALIBRATE_Z
    DOCK_PROBE_UNLOCK
    # Set and wait for nozzle to reach temperature
    SMART_PARK
    STATUS_HEATING
    M109 S{EXTRUDER}
    # Move back a bit more
    G92 E0
    LINE_PURGE
    G92 E0
    STATUS_PRINTING
    M83

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    STATUS_BUSY
    G92 E0                         ; zero the extruder
    G1 E-9 F3600                 ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G91
    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% if printer.toolhead.position.z < (max_z - 40) %}
      G91
      G0 Z40 F3600
    {% else %}
      G90
      G0 Z{max_z} F3600
    {% endif %}
    TURN_OFF_HEATERS
    M106 S0                        ; turn off fan
    G90                            ; absolute positioning
    G0 X{max_x - 5} Y{max_y - 5} F12000          ; park nozzle at rear
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.9
    # Disable steppers
    M84
    STATUS_OFF
    UPDATE_DELAYED_GCODE ID=delayed_fan_cooldown DURATION=900

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: BASE_PAUSE
gcode:
  {% set E = params.E|default(3.0)|float %}
  ##### set park positon for x and y #####
  {% set x_park = params.x_park|default(110)|float %}
  {% set y_park = params.y_park|default(0)|float %}
  {% set xy_speed = params.xy_speed|default(5000)|float %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  STATUS_BUSY
  #SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe} F900
      G90
      G1 X{x_park} Y{y_park} F{xy_speed}
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: BASE_RESUME
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].E|default(3.0)|float %}
  #{% set xy_speed = printer["gcode_macro PAUSE"].xy_speed|float %}
  G91
  G1 E{E} F5000
  STATUS_PRINTING
  #RESTORE_GCODE_STATE NAME=PAUSE_state
  BASE_RESUME

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### read E from pause macro #####
  #{% set xy_speed = printer["gcode_macro PAUSE"].xy_speed|float %}
  M106 S0       # Turn off part-fan
  {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

  {% if printer.toolhead.position.z < (max_z - 20) %}
    G91
    G0 Z20 F3600  
  {% else %}
    G90
    G0 Z{max_z} F3600
  {% endif %}
  # Do an un-retract
  G92 E0
  G1 E-7 F2100
  # Park nozzle, Cancel_Position
  TURN_OFF_HEATERS
  G90
  G1 X5 Y245 F5000
  STATUS_READY
  CANCEL_PRINT_BASE
    UPDATE_DELAYED_GCODE ID=delayed_fan_cooldown DURATION=900
  M84           # Turn off steppers

[gcode_macro DISABLE_EXTRUDER_STEPPER]
gcode:
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0

[gcode_macro M900]
description: Marlin-style PressureAdvance adjustment
gcode : 
  {% set K = params.K|default(0)|float %}
  SET_PRESSURE_ADVANCE ADVANCE={K}


# SDCard 'looping' (aka Marlin M808 commands) support
[sdcard_loop]
# 'Marlin' style M808 compatibility macro for SDCard looping
[gcode_macro M808]
gcode:
    {% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}
    {% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}
    {% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}

[gcode_macro RETRACTION_TEST_CONFIG]
gcode:
    {% set FACTOR = params.FACTOR|default(0.005)|float %}     # Direct=0.005 Bowden=0.050
    M117 Retraction Factor={FACTOR}
    TUNING_TOWER COMMAND=SET_RETRACTION PARAMETER=RETRACT_LENGTH START=0 FACTOR={FACTOR}

[gcode_macro PRESSURE_ADVANCE_TEST_CONFIG]
gcode:
    {% set FACTOR = params.FACTOR|default(0.005)|float %}     # Direct=0.005 Bowden=0.020
    M117 Pressure Adv Factor={FACTOR}
    SET_VELOCITY_LIMIT     SQUARE_CORNER_VELOCITY=1 ACCEL=500
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR={FACTOR}

